#!/usr/bin/python2.7
# -*- coding: UTF-8 -*-
#

import os
import thread
import sys
from time import sleep
import json
from os.path import expanduser
import signal
from collections import OrderedDict
import re

# Fix enconding in older Python versions
reload(sys)
sys.setdefaultencoding('utf8')

# Import GTK
from gi.repository import GLib, Gtk, GObject, Gdk, Notify, GdkPixbuf
from gi.repository import AppIndicator3 as appindicator

# Where is the data?
directories = [expanduser("~") + "/.local/share/emojione-picker", "/usr/local/share/emojione-picker", "/usr/share/emojione-picker", os.path.dirname(os.path.realpath(__file__))]
for d in directories:
    if os.path.isdir(d):
        directory = d;
        break

# Categories definitions
categories = ["recent", "people", "foods", "nature", "objects", "activity", "travel", "flags", "symbols"]
recenticons = OrderedDict()

# Load configuration
configpath = expanduser("~") + "/.config/emojione-picker"
os.path.isdir(configpath) or os.mkdir(configpath)
recentfile = configpath+"/recent.json"
if os.path.isfile(recentfile):
  with open(recentfile) as recent_json_file:
      recent = json.load(recent_json_file)
  recentindex = 0
  for k in recent.keys():
      if(int(recent[k]["recent_order"])>recentindex):
          recentindex = int(recent[k]["recent_order"])+1
else:
  recent = dict()
  recentindex = 0

# Refresh recent icons submenu
def refresh_recent_submenu():
    global recent, recent_items

    # Rearrange data
    def orderfunc(tup):
        key, d = tup
        return -int(d["recent_order"])
    sorted_recent = sorted(recent.items(), key=orderfunc)
    sorted_recent = OrderedDict(sorted_recent)

    # Refresh icons
    i = 0
    for key in sorted_recent:
        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + sorted_recent[key]["unicode"] + ".svg", iconsizes[1], iconsizes[2])
        img = Gtk.Image.new_from_pixbuf(pixbuf)
        recent_items[i].set_image(img)
        recent_items[i].set_label(sorted_recent[key]["name"].title())
        recent_items[i].show()
        recent_items[i].connect("activate", item_response, sorted_recent[key])
        i = i + 1

# Click response
def item_response(self, w):
    global recentindex, recent

    # If this is a toned item with submenu, do nothing
    if self.get_submenu() != None:
        return

    # Copy character to clipboard
    chars = w["unicode"].split("-")
    output = ""
    for char in chars:
        output = output + '\\U' + (char.zfill(8))
    clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
    GLib.idle_add(clipboard.set_text,output.decode('unicode-escape'), -1)

    # Show notification
    n = Notify.Notification.new(w["name"].title(), "Emoji is now in the clipboard. Paste it wherever you want!", directory + "/assets/svg/" + w["unicode"] + ".svg")
    n.show()

    # Remove item from recent if already present
    try:
        for k in recent.keys():
            if recent[k]["emoji_order"] == w["emoji_order"]:
                del recent[k]
    except ValueError:
        pass

    # Remove oldest item if recent is too big
    if len(recent)>=recent_items_maxno:
        smallestindex = float("inf")
        for k in recent.keys():
            if(recent[k]["recent_order"]<smallestindex):
                smallestindex = recent[k]["recent_order"]
                keytodelete = k
        del recent[keytodelete]

    # Store item on recent
    w["recent_order"] = recentindex
    recentindex=recentindex+1
    recent.update({w["emoji_order"]:w})

    # Save recentfile
    with open(recentfile, 'w') as outfile:
        json.dump(recent, outfile)

    # Refresh recent icons submenu
    GLib.idle_add(refresh_recent_submenu)  

def get_emoji_group(code):
    for key in groups_data:
        if code in groups_data[key]["unicodes"]:
            return key
    return False

if __name__ == "__main__":
    # Calling GObject.threads_init() is not needed for PyGObject 3.10.2+
    GObject.threads_init()

    # Initialize notifications
    Notify.init("emojione-picker")

    # Create the main menu
    menu = Gtk.Menu()

    # Create indicator
    ind = appindicator.Indicator.new("emojione-picker", directory + "/assets/icon.svg", appindicator.IndicatorCategory.APPLICATION_STATUS)
    ind.set_status(appindicator.IndicatorStatus.ACTIVE)

    # Get proper icon sizes
    iconsizes = Gtk.IconSize.lookup(Gtk.IconSize.MENU)
    
    # Create categories items and submenus
    category_item = {}
    category_menu = {}
    for category in categories:
        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/categories/" + category + ".svg", iconsizes[1], iconsizes[2])
        img = Gtk.Image.new_from_pixbuf(pixbuf)
        category_item[category] = Gtk.ImageMenuItem(category.title())
        settings = category_item[category].get_settings()
        settings.set_property('gtk-menu-images', True)
        GLib.idle_add(category_item[category].set_image, img)
        category_menu[category] = Gtk.Menu()
        category_item[category].set_submenu(category_menu[category]);

    # Load groups and icons definition and rearrange them in order
    with open(directory + "/assets/groups.json") as groups_file:
        groups_data = json.load(groups_file)
    with open(directory + "/assets/emoji.json") as json_file:
        json_data = json.load(json_file)
        def orderfunc(tup):
            key, d = tup
            return int(d["emoji_order"])
        sorted_data = sorted(json_data.items(), key=orderfunc)
        sorted_data = OrderedDict(sorted_data)

    # Load icons into menu items
    tones_re = re.compile('(.*) tone[ ]?\d', re.IGNORECASE)
    item_groups = {}
    submenu_groups = {}
    items = {}
    tone_groups = {}
    submenu_tones = {}
    for category in categories:
        for key in sorted_data:
            if sorted_data[key]["category"] == category:
                emoji_group = get_emoji_group(sorted_data[key]["unicode"])
                if emoji_group != False:
                    # Grouped emoji
                    if not emoji_group in item_groups:
                        # Create group item
                        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + groups_data[emoji_group]["icon"] + ".svg", iconsizes[1], iconsizes[2])
                        img = Gtk.Image.new_from_pixbuf(pixbuf)
                        item_groups[emoji_group] = Gtk.ImageMenuItem(groups_data[emoji_group]["name"].title())
                        settings = item_groups[emoji_group].get_settings()
                        settings.set_property('gtk-menu-images', True)
                        GLib.idle_add(item_groups[emoji_group].set_image, img)
                        GLib.idle_add(category_menu[category].append, item_groups[emoji_group])
                        GLib.idle_add(item_groups[emoji_group].show)
                        # Create group submenu
                        submenu_groups[emoji_group] = Gtk.Menu()
                        GLib.idle_add(item_groups[emoji_group].set_submenu, submenu_groups[emoji_group])
                    if tones_re.match(sorted_data[key]["name"]) == None:
                        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + sorted_data[key]["unicode"] + ".svg", iconsizes[1], iconsizes[2])
                        img = Gtk.Image.new_from_pixbuf(pixbuf)
                        items[sorted_data[key]["unicode"]] = Gtk.ImageMenuItem(sorted_data[key]["name"].title())
                        settings = items[sorted_data[key]["unicode"]].get_settings()
                        settings.set_property('gtk-menu-images', True)
                        GLib.idle_add(items[sorted_data[key]["unicode"]].set_image, img)
                        GLib.idle_add(submenu_groups[emoji_group].append, items[sorted_data[key]["unicode"]])
                        GLib.idle_add(items[sorted_data[key]["unicode"]].show)
                        items[sorted_data[key]["unicode"]].connect("activate", item_response, sorted_data[key])
                    else:
                        # This won't happen, we are not grouping toned icons
                        pass
                else:
                    if tones_re.match(sorted_data[key]["name"]) == None: 
                        # Not toned emoji (aka simplest case), just add to menu
                        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + sorted_data[key]["unicode"] + ".svg", iconsizes[1], iconsizes[2])
                        img = Gtk.Image.new_from_pixbuf(pixbuf)
                        items[sorted_data[key]["unicode"]] = Gtk.ImageMenuItem(sorted_data[key]["name"].title())
                        settings = items[sorted_data[key]["unicode"]].get_settings()
                        settings.set_property('gtk-menu-images', True)
                        GLib.idle_add(items[sorted_data[key]["unicode"]].set_image, img)
                        GLib.idle_add(category_menu[category].append, items[sorted_data[key]["unicode"]])
                        GLib.idle_add(items[sorted_data[key]["unicode"]].show)
                        items[sorted_data[key]["unicode"]].connect("activate", item_response, sorted_data[key])
                    else:
                        # Toned emoji
                        original_key = key
                        chars = sorted_data[key]["unicode"].split("-")
                        tone_group = chars[0] # FIXME this can be multibyte so taking the first byt isn't right
                        if not tone_group in tone_groups:
                            # Create tone submenu
                            submenu_tones[tone_group] = Gtk.Menu()
                            GLib.idle_add(items[tone_group].set_submenu, submenu_tones[tone_group])
                            tone_groups[tone_group] = items[tone_group]
                            # Get key from original icon
                            for k in sorted_data:
                                if sorted_data[k]["unicode"] == tone_group:
                                    key = k
                            # Append untoned icon to submenu
                            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + sorted_data[key]["unicode"] + ".svg", iconsizes[1], iconsizes[2])
                            img = Gtk.Image.new_from_pixbuf(pixbuf)
                            items[sorted_data[key]["unicode"]] = Gtk.ImageMenuItem(sorted_data[key]["name"].title())
                            settings = items[tone_group].get_settings()
                            settings.set_property('gtk-menu-images', True)
                            GLib.idle_add(items[sorted_data[key]["unicode"]].set_image, img)
                            GLib.idle_add(submenu_tones[tone_group].append, items[sorted_data[key]["unicode"]])
                            GLib.idle_add(items[sorted_data[key]["unicode"]].show)
                            items[sorted_data[key]["unicode"]].connect("activate", item_response, sorted_data[key])
                        key = original_key
                        # Append toned emoji to toned submenu
                        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(directory + "/assets/svg/" + sorted_data[key]["unicode"] + ".svg", iconsizes[1], iconsizes[2])
                        img = Gtk.Image.new_from_pixbuf(pixbuf)
                        items[sorted_data[key]["unicode"]] = Gtk.ImageMenuItem(sorted_data[key]["name"].title())
                        settings = items[sorted_data[key]["unicode"]].get_settings()
                        settings.set_property('gtk-menu-images', True)
                        GLib.idle_add(items[sorted_data[key]["unicode"]].set_image, img)
                        GLib.idle_add(submenu_tones[tone_group].append, items[sorted_data[key]["unicode"]])
                        GLib.idle_add(items[sorted_data[key]["unicode"]].show)
                        items[sorted_data[key]["unicode"]].connect("activate", item_response, sorted_data[key])

    # Load icons into recent category
    recent_items = []
    recent_items_maxno = 20
    for i in range (0, recent_items_maxno):
        recent_items.append( Gtk.ImageMenuItem())
        settings = recent_items[i].get_settings()
        settings.set_property('gtk-menu-images', True)
        category_menu["recent"].append(recent_items[i])
    refresh_recent_submenu()

    # Append categories to main menu
    for category in categories:
        GLib.idle_add(menu.append, category_item[category])
        GLib.idle_add(category_item[category].show)

    # Associate menu with indicator
    ind.set_menu(menu)

    # Gtk main - call after first update
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()

